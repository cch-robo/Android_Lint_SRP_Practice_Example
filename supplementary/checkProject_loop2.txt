beforeCheckProject (Ph.1)<<<

beforeCheckFile (Ph.1) -> Source=>>>
package test.pkg;


import java.util.TimeZone;

public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<

Node=PsiJavaFile
NodeImpl=EcjPsiJavaFile
Source=>>>package test.pkg;


import java.util.TimeZone;

public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<
parent=null:null
children=>>>[:TestWhitespace, package test.pkg;:EcjPsiPackageStatement, :TestWhitespace, import java.util.TimeZone;:EcjPsiImportList, :TestWhitespace, public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}:EcjPsiClass, :TestWhitespace, 
]<<<

Node=PsiPackageStatement
NodeImpl=EcjPsiPackageStatement
Source=>>>package test.pkg;<<<
parent=>>>
package test.pkg;


import java.util.TimeZone;

public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<:EcjPsiJavaFile
children=>>>[
]<<<

Node=PsiImportList
NodeImpl=EcjPsiImportList
Source=>>>import java.util.TimeZone;<<<
parent=>>>
package test.pkg;


import java.util.TimeZone;

public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<:EcjPsiJavaFile
children=>>>[:TestWhitespace, import java.util.TimeZone;:EcjPsiImport, :TestWhitespace, 
]<<<

Node=PsiImportStatement
NodeImpl=EcjPsiImport
Source=>>>import java.util.TimeZone;<<<
parent=>>>
import java.util.TimeZone;
<<<:EcjPsiImportList
children=>>>[:TestWhitespace, java.util.TimeZone:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>java.util.TimeZone<<<
parent=>>>
import java.util.TimeZone;
<<<:EcjPsiImport
children=>>>[:TestWhitespace, java.util:EcjPsiJavaCodeReferenceElement, :TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>java.util<<<
parent=>>>
java.util.TimeZone
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[:TestWhitespace, java:EcjPsiJavaCodeReferenceElement, :TestWhitespace, util:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>java<<<
parent=>>>
java.util
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[:TestWhitespace, java:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>java<<<
parent=>>>
java
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>java<<<
parent=>>>
java
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>util<<<
parent=>>>
java.util
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>util<<<
parent=>>>
java.util
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
java.util.TimeZone
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
java.util.TimeZone
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiClass
NodeImpl=EcjPsiClass
Source=>>>public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}<<<
parent=>>>
package test.pkg;


import java.util.TimeZone;

public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<:EcjPsiJavaFile
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, MixedMethodsGreet:EcjPsiIdentifier, :TestWhitespace, :EcjPsiTypeParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, private String mGreetName;:EcjPsiField, :TestWhitespace, private String mGreetMessage;:EcjPsiField, :TestWhitespace, private long mGreetTime;:EcjPsiField, :TestWhitespace, private int mGreetCount;:EcjPsiField, :TestWhitespace, public MixedMethodsGreet(String name) {
        init(name);
    }:EcjPsiMethod, :TestWhitespace, MixedMethodsGreet:EcjPsiIdentifier, :TestWhitespace, // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }:EcjPsiMethod, :TestWhitespace, init:EcjPsiIdentifier, :TestWhitespace, // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }:EcjPsiMethod, :TestWhitespace, createGreet:EcjPsiIdentifier, :TestWhitespace, // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }:EcjPsiMethod, :TestWhitespace, greet:EcjPsiIdentifier, :TestWhitespace, // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }:EcjPsiMethod, :TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;:EcjPsiField, :TestWhitespace, private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();:EcjPsiField, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MixedMethodsGreet<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MixedMethodsGreet<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiTypeParameterList
NodeImpl=EcjPsiTypeParameterList
Source=>>><<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private String mGreetName;<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private String mGreetName;<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private String mGreetMessage;<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private String mGreetMessage;<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private long mGreetTime;<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private long mGreetTime;<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private int mGreetCount;<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private int mGreetCount;<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>int<<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>public MixedMethodsGreet(String name) {
        init(name);
    }<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String name:EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        init(name);
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
public MixedMethodsGreet(String name) {
        init(name);
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>>String name<<<
parent=>>>
public MixedMethodsGreet(String name) {
        init(name);
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, String name:EcjPsiParameter, :TestWhitespace, 
]<<<
  PsiParameter -> String name

Node=PsiParameter
NodeImpl=EcjPsiParameter
Source=>>>String name<<<
parent=>>>
String name
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiParameter
Source=>>>String name<<<
parent=>>>
String name
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public MixedMethodsGreet(String name) {
        init(name);
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        init(name);
    <<<
parent=>>>
public MixedMethodsGreet(String name) {
        init(name);
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, init(name):EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>init(name)<<<
parent=>>>
{
        init(name);
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, init(name):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>init(name)<<<
parent=>>>
{
        init(name);
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, init(name):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>init(name)<<<
parent=>>>
init(name)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, init(name):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>init(name)<<<
parent=>>>
init(name)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, init(name):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>init(name)<<<
parent=>>>
init(name)
<<<:TestParentheses
children=>>>[:TestWhitespace, init:TestParentheses, :TestWhitespace, name:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>init(name)<<<
parent=>>>
init(name)
<<<:TestParentheses
children=>>>[:TestWhitespace, init:TestParentheses, :TestWhitespace, name:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>init(name)<<<
parent=>>>
init(name)
<<<:TestParentheses
children=>>>[:TestWhitespace, init:TestParentheses, :TestWhitespace, name:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>init(name)<<<
parent=>>>
init(name)
<<<:TestParentheses
children=>>>[:TestWhitespace, init:TestParentheses, :TestWhitespace, name:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>init<<<
parent=>>>
init(name)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, init:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>init<<<
parent=>>>
init(name)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, init:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>init<<<
parent=>>>
init
<<<:TestParentheses
children=>>>[:TestWhitespace, init:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>init<<<
parent=>>>
init
<<<:TestParentheses
children=>>>[:TestWhitespace, init:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>init<<<
parent=>>>
init
<<<:TestParentheses
children=>>>[:TestWhitespace, init:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>init<<<
parent=>>>
init
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>init<<<
parent=>>>
init
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>name<<<
parent=>>>
init(name)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, name:TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> name

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, name:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, name:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MixedMethodsGreet<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MixedMethodsGreet<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, String name:EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
// 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>>String name<<<
parent=>>>
// 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, String name:EcjPsiParameter, :TestWhitespace, 
]<<<
  PsiParameter -> String name

Node=PsiParameter
NodeImpl=EcjPsiParameter
Source=>>>String name<<<
parent=>>>
String name
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiParameter
Source=>>>String name<<<
parent=>>>
String name
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    <<<
parent=>>>
// 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, mGreetName = name:EcjPsiExpressionStatement, :TestWhitespace, mGreetMessage = "":EcjPsiExpressionStatement, :TestWhitespace, mGreetTime = 0L:EcjPsiExpressionStatement, :TestWhitespace, mGreetCount = 0:EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetName = name<<<
parent=>>>
{
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetName = name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetName = name<<<
parent=>>>
{
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetName = name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetName = name:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetName = name:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, name:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, name:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = ""<<<
parent=>>>
{
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = ""<<<
parent=>>>
{
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = ""<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = ""<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = ""<<<
parent=>>>
mGreetMessage = ""
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = ""<<<
parent=>>>
mGreetMessage = ""
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>""<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>""<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>""<<<
parent=>>>
""
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>""<<<
parent=>>>
""
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = 0L<<<
parent=>>>
{
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = 0L:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = 0L<<<
parent=>>>
{
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = 0L:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = 0L<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = 0L:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = 0L<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = 0L:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = 0L<<<
parent=>>>
mGreetTime = 0L
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, 0L:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = 0L<<<
parent=>>>
mGreetTime = 0L
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, 0L:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>0L<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, 0L:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>0L<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, 0L:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0L<<<
parent=>>>
0L
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0L<<<
parent=>>>
0L
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = 0<<<
parent=>>>
{
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = 0<<<
parent=>>>
{
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = 0<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = 0:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = 0<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = 0:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = 0<<<
parent=>>>
mGreetCount = 0
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = 0<<<
parent=>>>
mGreetCount = 0
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>init<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>init<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, :EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
// 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>><<<
parent=>>>
// 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    <<<
parent=>>>
// 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():EcjPsiExpressionStatement, :TestWhitespace, long dayOffset = getDayOffset(mGreetTime);:EcjPsiDeclarationStatement, :TestWhitespace, if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, System.currentTimeMillis():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, System.currentTimeMillis():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.currentTimeMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.currentTimeMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, currentTimeMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, currentTimeMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, currentTimeMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
System.currentTimeMillis()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long dayOffset = getDayOffset(mGreetTime);:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long dayOffset = getDayOffset(mGreetTime);:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, getDayOffset(mGreetTime):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, getDayOffset(mGreetTime):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, getDayOffset(mGreetTime):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, getDayOffset(mGreetTime):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, getDayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, getDayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>mGreetTime<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> mGreetTime

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):TestParentheses, :TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):TestParentheses, :TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= 0:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= 0:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "ZZZ...";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "ZZZ...";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "ZZZ...";
        }<<<
parent=>>>
{
            mGreetMessage = "ZZZ...";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
{
            mGreetMessage = "ZZZ...";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
{
            mGreetMessage = "ZZZ...";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "ZZZ...":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "ZZZ...":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"ZZZ..."<<<
parent=>>>
"ZZZ..."
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"ZZZ..."<<<
parent=>>>
"ZZZ..."
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おはようございます。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おはようございます。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "おはようございます。";
        }<<<
parent=>>>
{
            mGreetMessage = "おはようございます。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
{
            mGreetMessage = "おはようございます。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
{
            mGreetMessage = "おはようございます。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おはようございます。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おはようございます。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おはようございます。"<<<
parent=>>>
"おはようございます。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おはようございます。"<<<
parent=>>>
"おはようございます。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんにちは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんにちは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "こんにちは。";
        }<<<
parent=>>>
{
            mGreetMessage = "こんにちは。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
{
            mGreetMessage = "こんにちは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
{
            mGreetMessage = "こんにちは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんにちは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんにちは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんにちは。"<<<
parent=>>>
"こんにちは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんにちは。"<<<
parent=>>>
"こんにちは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんばんは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんばんは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "こんばんは。";
        }<<<
parent=>>>
{
            mGreetMessage = "こんばんは。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
{
            mGreetMessage = "こんばんは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
{
            mGreetMessage = "こんばんは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんばんは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんばんは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんばんは。"<<<
parent=>>>
"こんばんは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんばんは。"<<<
parent=>>>
"こんばんは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
{
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
{
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
{
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おやすみなさい。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おやすみなさい。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おやすみなさい。"<<<
parent=>>>
"おやすみなさい。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おやすみなさい。"<<<
parent=>>>
"おやすみなさい。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>createGreet<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>createGreet<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, :EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
// 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>><<<
parent=>>>
// 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    <<<
parent=>>>
// 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:EcjPsiExpressionStatement, :TestWhitespace, createGreet():EcjPsiExpressionStatement, :TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
{
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
{
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount + 1:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount + 1:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>1<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>1<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1<<<
parent=>>>
1
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1<<<
parent=>>>
1
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>createGreet()<<<
parent=>>>
{
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, createGreet():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>createGreet()<<<
parent=>>>
{
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, createGreet():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>createGreet()<<<
parent=>>>
createGreet()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, createGreet():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>createGreet()<<<
parent=>>>
createGreet()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, createGreet():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreet()<<<
parent=>>>
createGreet()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreet:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreet()<<<
parent=>>>
createGreet()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreet:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreet()<<<
parent=>>>
createGreet()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreet:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreet()<<<
parent=>>>
createGreet()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreet:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>createGreet<<<
parent=>>>
createGreet()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, createGreet:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>createGreet<<<
parent=>>>
createGreet()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, createGreet:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>createGreet<<<
parent=>>>
createGreet
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreet:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>createGreet<<<
parent=>>>
createGreet
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreet:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>createGreet<<<
parent=>>>
createGreet
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreet:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>createGreet<<<
parent=>>>
createGreet
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>createGreet<<<
parent=>>>
createGreet
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
createGreet()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
{
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
{
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "さん、":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "さん、":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"さん、"<<<
parent=>>>
"さん、"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"さん、"<<<
parent=>>>
"さん、"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, " (":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, " (":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>" ("<<<
parent=>>>
" ("
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>" ("<<<
parent=>>>
" ("
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "回目の挨拶)":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "回目の挨拶)":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"回目の挨拶)"<<<
parent=>>>
"回目の挨拶)"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"回目の挨拶)"<<<
parent=>>>
"回目の挨拶)"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>greet<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>greet<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, final long timeInMillis:EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>>final long timeInMillis<<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, final long timeInMillis:EcjPsiParameter, :TestWhitespace, 
]<<<
  PsiParameter -> final long timeInMillis

Node=PsiParameter
NodeImpl=EcjPsiParameter
Source=>>>final long timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiParameter
Source=>>>final long timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<
  PsiModifier -> final

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    <<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;:EcjPsiDeclarationStatement, :TestWhitespace, long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;:EcjPsiDeclarationStatement, :TestWhitespace, return fixedTimestamp - timestampOf12am;:EcjPsiReturnStatement, :TestWhitespace, 
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timeInMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timeInMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiReturnStatement
NodeImpl=EcjPsiReturnStatement
Source=>>>return fixedTimestamp - timestampOf12am;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiReturnStatement
Source=>>>return fixedTimestamp - timestampOf12am;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
return fixedTimestamp - timestampOf12am;
<<<:EcjPsiReturnStatement
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
return fixedTimestamp - timestampOf12am;
<<<:EcjPsiReturnStatement
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 24 * 3600 * 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 24 * 3600 * 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static
  PsiModifier -> final

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600 * 1000<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[:TestWhitespace, 24 * 3600 * 1000:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600 * 1000<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[:TestWhitespace, 24 * 3600 * 1000:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24 * 3600:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24 * 3600:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600<<<
parent=>>>
3600
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600<<<
parent=>>>
3600
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>1000<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>1000<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1000<<<
parent=>>>
1000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1000<<<
parent=>>>
1000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, TimeZone.getDefault().getRawOffset():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();<<<
parent=>>>
public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, TimeZone.getDefault().getRawOffset():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static
  PsiModifier -> final

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>int<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault():TestParentheses, :TestWhitespace, getRawOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault():TestParentheses, :TestWhitespace, getRawOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault():TestParentheses, :TestWhitespace, getRawOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone.getDefault():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone.getDefault():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:TestParentheses, :TestWhitespace, getDefault:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:TestParentheses, :TestWhitespace, getDefault:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:TestParentheses, :TestWhitespace, getDefault:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
TimeZone.getDefault()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

afterCheckFile (Ph.1) -> Source=>>>
package test.pkg;


import java.util.TimeZone;

public class MixedMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public MixedMethodsGreet(String name) {
        init(name);
    }

    // 状態変更混在メソッド
    private void init(String name) {
        mGreetName = name;
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更混在メソッド
    private void createGreet() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
    }

    // 状態変更混在メソッド
    public void greet() {
        mGreetCount = mGreetCount + 1;
        createGreet();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<

beforeCheckFile (Ph.1) -> Source=>>>
package test.pkg;

public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<

Node=PsiJavaFile
NodeImpl=EcjPsiJavaFile
Source=>>>package test.pkg;

public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}<<<
parent=null:null
children=>>>[:TestWhitespace, package test.pkg;:EcjPsiPackageStatement, :TestWhitespace, :EcjPsiImportList, :TestWhitespace, public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}:EcjPsiClass, :TestWhitespace, 
]<<<

Node=PsiPackageStatement
NodeImpl=EcjPsiPackageStatement
Source=>>>package test.pkg;<<<
parent=>>>
package test.pkg;

public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiJavaFile
children=>>>[
]<<<

Node=PsiImportList
NodeImpl=EcjPsiImportList
Source=>>><<<
parent=>>>
package test.pkg;

public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiJavaFile
children=>>>[
]<<<

Node=PsiClass
NodeImpl=EcjPsiClass
Source=>>>public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}<<<
parent=>>>
package test.pkg;

public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiJavaFile
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, MultiLogicFlagTest:EcjPsiIdentifier, :TestWhitespace, :EcjPsiTypeParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, private String message;:EcjPsiField, :TestWhitespace, private boolean isSuccess;:EcjPsiField, :TestWhitespace, public MultiLogicFlagTest(){
    }:EcjPsiMethod, :TestWhitespace, MultiLogicFlagTest:EcjPsiIdentifier, :TestWhitespace, public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }:EcjPsiMethod, :TestWhitespace, setup:EcjPsiIdentifier, :TestWhitespace, static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }:EcjPsiClass, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MultiLogicFlagTest<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MultiLogicFlagTest<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiTypeParameterList
NodeImpl=EcjPsiTypeParameterList
Source=>>><<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private String message;<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private String message;<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private String message;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
private String message;
<<<:EcjPsiField
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
private String message;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
private String message;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private boolean isSuccess;<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, boolean:EcjPsiTypeElement, :TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private boolean isSuccess;<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, boolean:EcjPsiTypeElement, :TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private boolean isSuccess;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>boolean<<<
parent=>>>
private boolean isSuccess;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
private boolean isSuccess;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
private boolean isSuccess;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>public MultiLogicFlagTest(){
    }<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, :EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
public MultiLogicFlagTest(){
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>><<<
parent=>>>
public MultiLogicFlagTest(){
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public MultiLogicFlagTest(){
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
    <<<
parent=>>>
public MultiLogicFlagTest(){
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MultiLogicFlagTest<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MultiLogicFlagTest<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, boolean isSuccess:EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>>boolean isSuccess<<<
parent=>>>
public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, boolean isSuccess:EcjPsiParameter, :TestWhitespace, 
]<<<
  PsiParameter -> boolean isSuccess

Node=PsiParameter
NodeImpl=EcjPsiParameter
Source=>>>boolean isSuccess<<<
parent=>>>
boolean isSuccess
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, boolean:EcjPsiTypeElement, :TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiParameter
Source=>>>boolean isSuccess<<<
parent=>>>
boolean isSuccess
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, boolean:EcjPsiTypeElement, :TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
boolean isSuccess
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>boolean<<<
parent=>>>
boolean isSuccess
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
boolean isSuccess
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
boolean isSuccess
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    <<<
parent=>>>
public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }:EcjPsiIfStatement, :TestWhitespace, System.out.println("step.1 message -> " + message):EcjPsiExpressionStatement, :TestWhitespace, if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";:EcjPsiIfStatement, :TestWhitespace, System.out.println("step.2 message -> " + message):EcjPsiExpressionStatement, :TestWhitespace, if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }:EcjPsiIfStatement, :TestWhitespace, System.out.println("step.3 message -> " + message):EcjPsiExpressionStatement, :TestWhitespace, if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }:EcjPsiIfStatement, :TestWhitespace, System.out.println("step.4 message -> " + message):EcjPsiExpressionStatement, :TestWhitespace, {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, isSuccess:TestParentheses, :TestWhitespace, {
            message = "success step.1";
        }:EcjPsiBlockStatement, :TestWhitespace, {
            message = "failed step.1";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, isSuccess:TestParentheses, :TestWhitespace, {
            message = "success step.1";
        }:EcjPsiBlockStatement, :TestWhitespace, {
            message = "failed step.1";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>isSuccess<<<
parent=>>>
if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, isSuccess:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>isSuccess<<<
parent=>>>
if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, isSuccess:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            message = "success step.1";
        }<<<
parent=>>>
if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            message = "success step.1";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            message = "success step.1";
        }<<<
parent=>>>
if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            message = "success step.1";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            message = "success step.1";
        }<<<
parent=>>>
{
            message = "success step.1";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, message = "success step.1":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "success step.1"<<<
parent=>>>
{
            message = "success step.1";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "success step.1":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "success step.1"<<<
parent=>>>
{
            message = "success step.1";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "success step.1":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message = "success step.1"<<<
parent=>>>
message = "success step.1"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "success step.1":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message = "success step.1"<<<
parent=>>>
message = "success step.1"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "success step.1":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "success step.1"<<<
parent=>>>
message = "success step.1"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "success step.1":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "success step.1"<<<
parent=>>>
message = "success step.1"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "success step.1":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "success step.1"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "success step.1"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"success step.1"<<<
parent=>>>
message = "success step.1"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "success step.1":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"success step.1"<<<
parent=>>>
message = "success step.1"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "success step.1":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"success step.1"<<<
parent=>>>
"success step.1"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"success step.1"<<<
parent=>>>
"success step.1"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            message = "failed step.1";
        }<<<
parent=>>>
if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            message = "failed step.1";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            message = "failed step.1";
        }<<<
parent=>>>
if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            message = "failed step.1";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            message = "failed step.1";
        }<<<
parent=>>>
{
            message = "failed step.1";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, message = "failed step.1":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "failed step.1"<<<
parent=>>>
{
            message = "failed step.1";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "failed step.1":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "failed step.1"<<<
parent=>>>
{
            message = "failed step.1";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "failed step.1":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message = "failed step.1"<<<
parent=>>>
message = "failed step.1"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "failed step.1":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message = "failed step.1"<<<
parent=>>>
message = "failed step.1"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "failed step.1":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "failed step.1"<<<
parent=>>>
message = "failed step.1"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "failed step.1":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "failed step.1"<<<
parent=>>>
message = "failed step.1"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "failed step.1":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "failed step.1"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "failed step.1"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"failed step.1"<<<
parent=>>>
message = "failed step.1"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "failed step.1":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"failed step.1"<<<
parent=>>>
message = "failed step.1"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "failed step.1":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"failed step.1"<<<
parent=>>>
"failed step.1"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"failed step.1"<<<
parent=>>>
"failed step.1"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println("step.1 message -> " + message)<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println("step.1 message -> " + message):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println("step.1 message -> " + message)<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println("step.1 message -> " + message):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println("step.1 message -> " + message)<<<
parent=>>>
System.out.println("step.1 message -> " + message)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println("step.1 message -> " + message):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println("step.1 message -> " + message)<<<
parent=>>>
System.out.println("step.1 message -> " + message)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println("step.1 message -> " + message):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.1 message -> " + message)<<<
parent=>>>
System.out.println("step.1 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.1 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.1 message -> " + message)<<<
parent=>>>
System.out.println("step.1 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.1 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.1 message -> " + message)<<<
parent=>>>
System.out.println("step.1 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.1 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.1 message -> " + message)<<<
parent=>>>
System.out.println("step.1 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.1 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println("step.1 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println("step.1 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>"step.1 message -> " + message<<<
parent=>>>
System.out.println("step.1 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, "step.1 message -> " + message:TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> "step.1 message -> " + message

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"step.1 message -> " + message<<<
parent=>>>
"step.1 message -> " + message
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, "step.1 message -> " + message:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"step.1 message -> " + message<<<
parent=>>>
"step.1 message -> " + message
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, "step.1 message -> " + message:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.1 message -> " + message<<<
parent=>>>
"step.1 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.1 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.1 message -> " + message<<<
parent=>>>
"step.1 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.1 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.1 message -> " + message<<<
parent=>>>
"step.1 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.1 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.1 message -> " + message<<<
parent=>>>
"step.1 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.1 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"step.1 message -> "<<<
parent=>>>
"step.1 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "step.1 message -> ":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"step.1 message -> "<<<
parent=>>>
"step.1 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "step.1 message -> ":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"step.1 message -> "<<<
parent=>>>
"step.1 message -> "
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"step.1 message -> "<<<
parent=>>>
"step.1 message -> "
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
"step.1 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
"step.1 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, isSuccess:TestParentheses, :TestWhitespace, message = "success step.2":EcjPsiExpressionStatement, :TestWhitespace, message = "failed step.2":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, isSuccess:TestParentheses, :TestWhitespace, message = "success step.2":EcjPsiExpressionStatement, :TestWhitespace, message = "failed step.2":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>isSuccess<<<
parent=>>>
if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, isSuccess:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>isSuccess<<<
parent=>>>
if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, isSuccess:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "success step.2"<<<
parent=>>>
if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, message = "success step.2":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "success step.2"<<<
parent=>>>
if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, message = "success step.2":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message = "success step.2"<<<
parent=>>>
message = "success step.2"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "success step.2":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message = "success step.2"<<<
parent=>>>
message = "success step.2"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "success step.2":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "success step.2"<<<
parent=>>>
message = "success step.2"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "success step.2":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "success step.2"<<<
parent=>>>
message = "success step.2"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "success step.2":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "success step.2"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "success step.2"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"success step.2"<<<
parent=>>>
message = "success step.2"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "success step.2":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"success step.2"<<<
parent=>>>
message = "success step.2"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "success step.2":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"success step.2"<<<
parent=>>>
"success step.2"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"success step.2"<<<
parent=>>>
"success step.2"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "failed step.2"<<<
parent=>>>
if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, message = "failed step.2":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "failed step.2"<<<
parent=>>>
if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, message = "failed step.2":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message = "failed step.2"<<<
parent=>>>
message = "failed step.2"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "failed step.2":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message = "failed step.2"<<<
parent=>>>
message = "failed step.2"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "failed step.2":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "failed step.2"<<<
parent=>>>
message = "failed step.2"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "failed step.2":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "failed step.2"<<<
parent=>>>
message = "failed step.2"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "failed step.2":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "failed step.2"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "failed step.2"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"failed step.2"<<<
parent=>>>
message = "failed step.2"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "failed step.2":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"failed step.2"<<<
parent=>>>
message = "failed step.2"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "failed step.2":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"failed step.2"<<<
parent=>>>
"failed step.2"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"failed step.2"<<<
parent=>>>
"failed step.2"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println("step.2 message -> " + message)<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println("step.2 message -> " + message):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println("step.2 message -> " + message)<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println("step.2 message -> " + message):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println("step.2 message -> " + message)<<<
parent=>>>
System.out.println("step.2 message -> " + message)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println("step.2 message -> " + message):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println("step.2 message -> " + message)<<<
parent=>>>
System.out.println("step.2 message -> " + message)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println("step.2 message -> " + message):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.2 message -> " + message)<<<
parent=>>>
System.out.println("step.2 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.2 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.2 message -> " + message)<<<
parent=>>>
System.out.println("step.2 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.2 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.2 message -> " + message)<<<
parent=>>>
System.out.println("step.2 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.2 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.2 message -> " + message)<<<
parent=>>>
System.out.println("step.2 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.2 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println("step.2 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println("step.2 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>"step.2 message -> " + message<<<
parent=>>>
System.out.println("step.2 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, "step.2 message -> " + message:TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> "step.2 message -> " + message

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"step.2 message -> " + message<<<
parent=>>>
"step.2 message -> " + message
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, "step.2 message -> " + message:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"step.2 message -> " + message<<<
parent=>>>
"step.2 message -> " + message
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, "step.2 message -> " + message:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.2 message -> " + message<<<
parent=>>>
"step.2 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.2 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.2 message -> " + message<<<
parent=>>>
"step.2 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.2 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.2 message -> " + message<<<
parent=>>>
"step.2 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.2 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.2 message -> " + message<<<
parent=>>>
"step.2 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.2 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"step.2 message -> "<<<
parent=>>>
"step.2 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "step.2 message -> ":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"step.2 message -> "<<<
parent=>>>
"step.2 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "step.2 message -> ":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"step.2 message -> "<<<
parent=>>>
"step.2 message -> "
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"step.2 message -> "<<<
parent=>>>
"step.2 message -> "
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
"step.2 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
"step.2 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, this.isSuccess:TestParentheses, :TestWhitespace, {
            message = "success step.3";
        }:EcjPsiBlockStatement, :TestWhitespace, {
            message = "failed step.3";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, this.isSuccess:TestParentheses, :TestWhitespace, {
            message = "success step.3";
        }:EcjPsiBlockStatement, :TestWhitespace, {
            message = "failed step.3";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>this.isSuccess<<<
parent=>>>
if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, this.isSuccess:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>this.isSuccess<<<
parent=>>>
if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, this.isSuccess:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>this.isSuccess<<<
parent=>>>
this.isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, this:TestParentheses, :TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>this.isSuccess<<<
parent=>>>
this.isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, this:TestParentheses, :TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>this.isSuccess<<<
parent=>>>
this.isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, this:TestParentheses, :TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>this<<<
parent=>>>
this.isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, this:EcjPsiThisExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>this<<<
parent=>>>
this.isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, this:EcjPsiThisExpression, :TestWhitespace, 
]<<<

Node=PsiThisExpression
NodeImpl=EcjPsiThisExpression
Source=>>>this<<<
parent=>>>
this
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiThisExpression
Source=>>>this<<<
parent=>>>
this
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
this.isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
this.isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            message = "success step.3";
        }<<<
parent=>>>
if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            message = "success step.3";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            message = "success step.3";
        }<<<
parent=>>>
if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            message = "success step.3";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            message = "success step.3";
        }<<<
parent=>>>
{
            message = "success step.3";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, message = "success step.3":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "success step.3"<<<
parent=>>>
{
            message = "success step.3";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "success step.3":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "success step.3"<<<
parent=>>>
{
            message = "success step.3";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "success step.3":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message = "success step.3"<<<
parent=>>>
message = "success step.3"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "success step.3":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message = "success step.3"<<<
parent=>>>
message = "success step.3"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "success step.3":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "success step.3"<<<
parent=>>>
message = "success step.3"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "success step.3":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "success step.3"<<<
parent=>>>
message = "success step.3"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "success step.3":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "success step.3"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "success step.3"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"success step.3"<<<
parent=>>>
message = "success step.3"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "success step.3":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"success step.3"<<<
parent=>>>
message = "success step.3"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "success step.3":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"success step.3"<<<
parent=>>>
"success step.3"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"success step.3"<<<
parent=>>>
"success step.3"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            message = "failed step.3";
        }<<<
parent=>>>
if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            message = "failed step.3";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            message = "failed step.3";
        }<<<
parent=>>>
if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            message = "failed step.3";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            message = "failed step.3";
        }<<<
parent=>>>
{
            message = "failed step.3";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, message = "failed step.3":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "failed step.3"<<<
parent=>>>
{
            message = "failed step.3";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "failed step.3":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "failed step.3"<<<
parent=>>>
{
            message = "failed step.3";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "failed step.3":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message = "failed step.3"<<<
parent=>>>
message = "failed step.3"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "failed step.3":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message = "failed step.3"<<<
parent=>>>
message = "failed step.3"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "failed step.3":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "failed step.3"<<<
parent=>>>
message = "failed step.3"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "failed step.3":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "failed step.3"<<<
parent=>>>
message = "failed step.3"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "failed step.3":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "failed step.3"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "failed step.3"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"failed step.3"<<<
parent=>>>
message = "failed step.3"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "failed step.3":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"failed step.3"<<<
parent=>>>
message = "failed step.3"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "failed step.3":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"failed step.3"<<<
parent=>>>
"failed step.3"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"failed step.3"<<<
parent=>>>
"failed step.3"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println("step.3 message -> " + message)<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println("step.3 message -> " + message):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println("step.3 message -> " + message)<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println("step.3 message -> " + message):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println("step.3 message -> " + message)<<<
parent=>>>
System.out.println("step.3 message -> " + message)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println("step.3 message -> " + message):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println("step.3 message -> " + message)<<<
parent=>>>
System.out.println("step.3 message -> " + message)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println("step.3 message -> " + message):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.3 message -> " + message)<<<
parent=>>>
System.out.println("step.3 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.3 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.3 message -> " + message)<<<
parent=>>>
System.out.println("step.3 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.3 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.3 message -> " + message)<<<
parent=>>>
System.out.println("step.3 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.3 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.3 message -> " + message)<<<
parent=>>>
System.out.println("step.3 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.3 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println("step.3 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println("step.3 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>"step.3 message -> " + message<<<
parent=>>>
System.out.println("step.3 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, "step.3 message -> " + message:TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> "step.3 message -> " + message

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"step.3 message -> " + message<<<
parent=>>>
"step.3 message -> " + message
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, "step.3 message -> " + message:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"step.3 message -> " + message<<<
parent=>>>
"step.3 message -> " + message
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, "step.3 message -> " + message:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.3 message -> " + message<<<
parent=>>>
"step.3 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.3 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.3 message -> " + message<<<
parent=>>>
"step.3 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.3 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.3 message -> " + message<<<
parent=>>>
"step.3 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.3 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.3 message -> " + message<<<
parent=>>>
"step.3 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.3 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"step.3 message -> "<<<
parent=>>>
"step.3 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "step.3 message -> ":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"step.3 message -> "<<<
parent=>>>
"step.3 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "step.3 message -> ":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"step.3 message -> "<<<
parent=>>>
"step.3 message -> "
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"step.3 message -> "<<<
parent=>>>
"step.3 message -> "
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
"step.3 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
"step.3 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, SubClass.isSuccess:TestParentheses, :TestWhitespace, {
            message = "success step.4";
        }:EcjPsiBlockStatement, :TestWhitespace, {
            message = "failed step.4";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, SubClass.isSuccess:TestParentheses, :TestWhitespace, {
            message = "success step.4";
        }:EcjPsiBlockStatement, :TestWhitespace, {
            message = "failed step.4";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>SubClass.isSuccess<<<
parent=>>>
if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, SubClass.isSuccess:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>SubClass.isSuccess<<<
parent=>>>
if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, SubClass.isSuccess:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>SubClass.isSuccess<<<
parent=>>>
SubClass.isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, SubClass:TestParentheses, :TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>SubClass.isSuccess<<<
parent=>>>
SubClass.isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, SubClass:TestParentheses, :TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>SubClass.isSuccess<<<
parent=>>>
SubClass.isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, SubClass:TestParentheses, :TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>SubClass<<<
parent=>>>
SubClass.isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, SubClass:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>SubClass<<<
parent=>>>
SubClass.isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, SubClass:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>SubClass<<<
parent=>>>
SubClass
<<<:TestParentheses
children=>>>[:TestWhitespace, SubClass:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>SubClass<<<
parent=>>>
SubClass
<<<:TestParentheses
children=>>>[:TestWhitespace, SubClass:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>SubClass<<<
parent=>>>
SubClass
<<<:TestParentheses
children=>>>[:TestWhitespace, SubClass:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>SubClass<<<
parent=>>>
SubClass
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>SubClass<<<
parent=>>>
SubClass
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
SubClass.isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
SubClass.isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            message = "success step.4";
        }<<<
parent=>>>
if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            message = "success step.4";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            message = "success step.4";
        }<<<
parent=>>>
if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            message = "success step.4";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            message = "success step.4";
        }<<<
parent=>>>
{
            message = "success step.4";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, message = "success step.4":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "success step.4"<<<
parent=>>>
{
            message = "success step.4";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "success step.4":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "success step.4"<<<
parent=>>>
{
            message = "success step.4";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "success step.4":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message = "success step.4"<<<
parent=>>>
message = "success step.4"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "success step.4":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message = "success step.4"<<<
parent=>>>
message = "success step.4"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "success step.4":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "success step.4"<<<
parent=>>>
message = "success step.4"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "success step.4":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "success step.4"<<<
parent=>>>
message = "success step.4"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "success step.4":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "success step.4"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "success step.4"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"success step.4"<<<
parent=>>>
message = "success step.4"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "success step.4":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"success step.4"<<<
parent=>>>
message = "success step.4"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "success step.4":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"success step.4"<<<
parent=>>>
"success step.4"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"success step.4"<<<
parent=>>>
"success step.4"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            message = "failed step.4";
        }<<<
parent=>>>
if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            message = "failed step.4";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            message = "failed step.4";
        }<<<
parent=>>>
if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            message = "failed step.4";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            message = "failed step.4";
        }<<<
parent=>>>
{
            message = "failed step.4";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, message = "failed step.4":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "failed step.4"<<<
parent=>>>
{
            message = "failed step.4";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "failed step.4":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "failed step.4"<<<
parent=>>>
{
            message = "failed step.4";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "failed step.4":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message = "failed step.4"<<<
parent=>>>
message = "failed step.4"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "failed step.4":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message = "failed step.4"<<<
parent=>>>
message = "failed step.4"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "failed step.4":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "failed step.4"<<<
parent=>>>
message = "failed step.4"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "failed step.4":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "failed step.4"<<<
parent=>>>
message = "failed step.4"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "failed step.4":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "failed step.4"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "failed step.4"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"failed step.4"<<<
parent=>>>
message = "failed step.4"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "failed step.4":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"failed step.4"<<<
parent=>>>
message = "failed step.4"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "failed step.4":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"failed step.4"<<<
parent=>>>
"failed step.4"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"failed step.4"<<<
parent=>>>
"failed step.4"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println("step.4 message -> " + message)<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println("step.4 message -> " + message):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println("step.4 message -> " + message)<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println("step.4 message -> " + message):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println("step.4 message -> " + message)<<<
parent=>>>
System.out.println("step.4 message -> " + message)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println("step.4 message -> " + message):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println("step.4 message -> " + message)<<<
parent=>>>
System.out.println("step.4 message -> " + message)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println("step.4 message -> " + message):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.4 message -> " + message)<<<
parent=>>>
System.out.println("step.4 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.4 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.4 message -> " + message)<<<
parent=>>>
System.out.println("step.4 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.4 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.4 message -> " + message)<<<
parent=>>>
System.out.println("step.4 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.4 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.4 message -> " + message)<<<
parent=>>>
System.out.println("step.4 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.4 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println("step.4 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println("step.4 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>"step.4 message -> " + message<<<
parent=>>>
System.out.println("step.4 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, "step.4 message -> " + message:TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> "step.4 message -> " + message

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"step.4 message -> " + message<<<
parent=>>>
"step.4 message -> " + message
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, "step.4 message -> " + message:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"step.4 message -> " + message<<<
parent=>>>
"step.4 message -> " + message
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, "step.4 message -> " + message:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.4 message -> " + message<<<
parent=>>>
"step.4 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.4 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.4 message -> " + message<<<
parent=>>>
"step.4 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.4 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.4 message -> " + message<<<
parent=>>>
"step.4 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.4 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.4 message -> " + message<<<
parent=>>>
"step.4 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.4 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"step.4 message -> "<<<
parent=>>>
"step.4 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "step.4 message -> ":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"step.4 message -> "<<<
parent=>>>
"step.4 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "step.4 message -> ":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"step.4 message -> "<<<
parent=>>>
"step.4 message -> "
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"step.4 message -> "<<<
parent=>>>
"step.4 message -> "
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
"step.4 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
"step.4 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }<<<
parent=>>>
{
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }<<<
parent=>>>
{
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, String message;:EcjPsiDeclarationStatement, :TestWhitespace, if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }:EcjPsiIfStatement, :TestWhitespace, System.out.println("step.5 message -> " + message):EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>String message;<<<
parent=>>>
{
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, String message;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>String message;<<<
parent=>>>
{
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, String message;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>String message;<<<
parent=>>>
String message;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>String message;<<<
parent=>>>
String message;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
String message;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
String message;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
String message;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
String message;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }<<<
parent=>>>
{
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, isSuccess:TestParentheses, :TestWhitespace, {
                message = "success step.5";
            }:EcjPsiBlockStatement, :TestWhitespace, {
                message = "failed step.5";
            }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }<<<
parent=>>>
{
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, isSuccess:TestParentheses, :TestWhitespace, {
                message = "success step.5";
            }:EcjPsiBlockStatement, :TestWhitespace, {
                message = "failed step.5";
            }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>isSuccess<<<
parent=>>>
if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, isSuccess:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>isSuccess<<<
parent=>>>
if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, isSuccess:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:TestParentheses
children=>>>[:TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
isSuccess
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
                message = "success step.5";
            }<<<
parent=>>>
if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
                message = "success step.5";
            }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
                message = "success step.5";
            }<<<
parent=>>>
if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
                message = "success step.5";
            }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
                message = "success step.5";
            }<<<
parent=>>>
{
                message = "success step.5";
            }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, message = "success step.5":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "success step.5"<<<
parent=>>>
{
                message = "success step.5";
            }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "success step.5":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "success step.5"<<<
parent=>>>
{
                message = "success step.5";
            }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "success step.5":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message = "success step.5"<<<
parent=>>>
message = "success step.5"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "success step.5":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message = "success step.5"<<<
parent=>>>
message = "success step.5"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "success step.5":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "success step.5"<<<
parent=>>>
message = "success step.5"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "success step.5":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "success step.5"<<<
parent=>>>
message = "success step.5"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "success step.5":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "success step.5"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "success step.5"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"success step.5"<<<
parent=>>>
message = "success step.5"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "success step.5":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"success step.5"<<<
parent=>>>
message = "success step.5"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "success step.5":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"success step.5"<<<
parent=>>>
"success step.5"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"success step.5"<<<
parent=>>>
"success step.5"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
                message = "failed step.5";
            }<<<
parent=>>>
if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
                message = "failed step.5";
            }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
                message = "failed step.5";
            }<<<
parent=>>>
if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
                message = "failed step.5";
            }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
                message = "failed step.5";
            }<<<
parent=>>>
{
                message = "failed step.5";
            }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, message = "failed step.5":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "failed step.5"<<<
parent=>>>
{
                message = "failed step.5";
            }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "failed step.5":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>message = "failed step.5"<<<
parent=>>>
{
                message = "failed step.5";
            }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, message = "failed step.5":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message = "failed step.5"<<<
parent=>>>
message = "failed step.5"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "failed step.5":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message = "failed step.5"<<<
parent=>>>
message = "failed step.5"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, message = "failed step.5":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "failed step.5"<<<
parent=>>>
message = "failed step.5"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "failed step.5":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>message = "failed step.5"<<<
parent=>>>
message = "failed step.5"
<<<:TestParentheses
children=>>>[:TestWhitespace, message:TestParentheses, :TestWhitespace, "failed step.5":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "failed step.5"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
message = "failed step.5"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"failed step.5"<<<
parent=>>>
message = "failed step.5"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "failed step.5":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"failed step.5"<<<
parent=>>>
message = "failed step.5"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "failed step.5":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"failed step.5"<<<
parent=>>>
"failed step.5"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"failed step.5"<<<
parent=>>>
"failed step.5"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println("step.5 message -> " + message)<<<
parent=>>>
{
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println("step.5 message -> " + message):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println("step.5 message -> " + message)<<<
parent=>>>
{
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println("step.5 message -> " + message):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println("step.5 message -> " + message)<<<
parent=>>>
System.out.println("step.5 message -> " + message)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println("step.5 message -> " + message):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println("step.5 message -> " + message)<<<
parent=>>>
System.out.println("step.5 message -> " + message)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println("step.5 message -> " + message):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.5 message -> " + message)<<<
parent=>>>
System.out.println("step.5 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.5 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.5 message -> " + message)<<<
parent=>>>
System.out.println("step.5 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.5 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.5 message -> " + message)<<<
parent=>>>
System.out.println("step.5 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.5 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println("step.5 message -> " + message)<<<
parent=>>>
System.out.println("step.5 message -> " + message)
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, "step.5 message -> " + message:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println("step.5 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println("step.5 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>"step.5 message -> " + message<<<
parent=>>>
System.out.println("step.5 message -> " + message)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, "step.5 message -> " + message:TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> "step.5 message -> " + message

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"step.5 message -> " + message<<<
parent=>>>
"step.5 message -> " + message
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, "step.5 message -> " + message:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"step.5 message -> " + message<<<
parent=>>>
"step.5 message -> " + message
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, "step.5 message -> " + message:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.5 message -> " + message<<<
parent=>>>
"step.5 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.5 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.5 message -> " + message<<<
parent=>>>
"step.5 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.5 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.5 message -> " + message<<<
parent=>>>
"step.5 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.5 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>"step.5 message -> " + message<<<
parent=>>>
"step.5 message -> " + message
<<<:TestParentheses
children=>>>[:TestWhitespace, "step.5 message -> ":TestParentheses, :TestWhitespace, message:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"step.5 message -> "<<<
parent=>>>
"step.5 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "step.5 message -> ":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"step.5 message -> "<<<
parent=>>>
"step.5 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "step.5 message -> ":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"step.5 message -> "<<<
parent=>>>
"step.5 message -> "
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"step.5 message -> "<<<
parent=>>>
"step.5 message -> "
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
"step.5 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>message<<<
parent=>>>
"step.5 message -> " + message
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, message:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>message<<<
parent=>>>
message
<<<:TestParentheses
children=>>>[:TestWhitespace, message:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>message<<<
parent=>>>
message
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>setup<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>setup<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiClass
NodeImpl=EcjPsiClass
Source=>>>static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }<<<
parent=>>>
public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, SubClass:EcjPsiIdentifier, :TestWhitespace, :EcjPsiTypeParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, private static boolean isSuccess;:EcjPsiField, :TestWhitespace, public SubClass(){
        }:EcjPsiMethod, :TestWhitespace, SubClass:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }
<<<:EcjPsiClass
children=>>>[
]<<<
  PsiModifier -> static

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>SubClass<<<
parent=>>>
static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>SubClass<<<
parent=>>>
static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiTypeParameterList
NodeImpl=EcjPsiTypeParameterList
Source=>>><<<
parent=>>>
static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private static boolean isSuccess;<<<
parent=>>>
static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, boolean:EcjPsiTypeElement, :TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private static boolean isSuccess;<<<
parent=>>>
static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, boolean:EcjPsiTypeElement, :TestWhitespace, isSuccess:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private static boolean isSuccess;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>boolean<<<
parent=>>>
private static boolean isSuccess;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
private static boolean isSuccess;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>isSuccess<<<
parent=>>>
private static boolean isSuccess;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>public SubClass(){
        }<<<
parent=>>>
static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, :EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
public SubClass(){
        }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>><<<
parent=>>>
public SubClass(){
        }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public SubClass(){
        }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        <<<
parent=>>>
public SubClass(){
        }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>SubClass<<<
parent=>>>
static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>SubClass<<<
parent=>>>
static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }
<<<:EcjPsiClass
children=>>>[
]<<<

afterCheckFile (Ph.1) -> Source=>>>
package test.pkg;

public class MultiLogicFlagTest {

    private String message;
    private boolean isSuccess;

    public MultiLogicFlagTest(){
    }

    public void setup(boolean isSuccess) {
        // 条件式にメソッドパラメータがある
        if (isSuccess) {
            message = "success step.1";
        } else {
            message = "failed step.1";
        }
        System.out.println("step.1 message -> " + message);
        
        // 条件式にメソッドパラメータがある
        if (isSuccess) 
            message = "success step.2";
        else 
            message = "failed step.2";
        System.out.println("step.2 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (this.isSuccess) {
            message = "success step.3";
        } else {
            message = "failed step.3";
        }
        System.out.println("step.3 message -> " + message);
        
        // 条件式にメソッドパラメータがない
        if (SubClass.isSuccess) {
            message = "success step.4";
        } else {
            message = "failed step.4";
        }
        System.out.println("step.4 message -> " + message);
        
        {
            // フィールド変数を変更していない
            String message;
            if (isSuccess) {
                message = "success step.5";
            } else {
                message = "failed step.5";
            }
            System.out.println("step.5 message -> " + message);
        }
        
    }

    static class SubClass {

        private static boolean isSuccess;
        public SubClass(){
        }

    }

}
<<<

beforeCheckFile (Ph.1) -> Source=>>>
package test.pkg;

import java.util.TimeZone;

public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<

Node=PsiJavaFile
NodeImpl=EcjPsiJavaFile
Source=>>>package test.pkg;

import java.util.TimeZone;

public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<
parent=null:null
children=>>>[:TestWhitespace, package test.pkg;:EcjPsiPackageStatement, :TestWhitespace, import java.util.TimeZone;:EcjPsiImportList, :TestWhitespace, public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}:EcjPsiClass, :TestWhitespace, 
]<<<

Node=PsiPackageStatement
NodeImpl=EcjPsiPackageStatement
Source=>>>package test.pkg;<<<
parent=>>>
package test.pkg;

import java.util.TimeZone;

public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<:EcjPsiJavaFile
children=>>>[
]<<<

Node=PsiImportList
NodeImpl=EcjPsiImportList
Source=>>>import java.util.TimeZone;<<<
parent=>>>
package test.pkg;

import java.util.TimeZone;

public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<:EcjPsiJavaFile
children=>>>[:TestWhitespace, import java.util.TimeZone;:EcjPsiImport, :TestWhitespace, 
]<<<

Node=PsiImportStatement
NodeImpl=EcjPsiImport
Source=>>>import java.util.TimeZone;<<<
parent=>>>
import java.util.TimeZone;
<<<:EcjPsiImportList
children=>>>[:TestWhitespace, java.util.TimeZone:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>java.util.TimeZone<<<
parent=>>>
import java.util.TimeZone;
<<<:EcjPsiImport
children=>>>[:TestWhitespace, java.util:EcjPsiJavaCodeReferenceElement, :TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>java.util<<<
parent=>>>
java.util.TimeZone
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[:TestWhitespace, java:EcjPsiJavaCodeReferenceElement, :TestWhitespace, util:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>java<<<
parent=>>>
java.util
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[:TestWhitespace, java:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>java<<<
parent=>>>
java
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>java<<<
parent=>>>
java
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>util<<<
parent=>>>
java.util
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>util<<<
parent=>>>
java.util
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
java.util.TimeZone
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
java.util.TimeZone
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiClass
NodeImpl=EcjPsiClass
Source=>>>public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}<<<
parent=>>>
package test.pkg;

import java.util.TimeZone;

public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<:EcjPsiJavaFile
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, OnlyShareMethodsGreet:EcjPsiIdentifier, :TestWhitespace, :EcjPsiTypeParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, private String mGreetName;:EcjPsiField, :TestWhitespace, private String mGreetMessage;:EcjPsiField, :TestWhitespace, private long mGreetTime;:EcjPsiField, :TestWhitespace, private int mGreetCount;:EcjPsiField, :TestWhitespace, public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }:EcjPsiMethod, :TestWhitespace, OnlyShareMethodsGreet:EcjPsiIdentifier, :TestWhitespace, // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }:EcjPsiMethod, :TestWhitespace, initGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }:EcjPsiMethod, :TestWhitespace, createGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }:EcjPsiMethod, :TestWhitespace, greet:EcjPsiIdentifier, :TestWhitespace, // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }:EcjPsiMethod, :TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;:EcjPsiField, :TestWhitespace, private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();:EcjPsiField, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>OnlyShareMethodsGreet<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>OnlyShareMethodsGreet<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiTypeParameterList
NodeImpl=EcjPsiTypeParameterList
Source=>>><<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private String mGreetName;<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private String mGreetName;<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private String mGreetMessage;<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private String mGreetMessage;<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private long mGreetTime;<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private long mGreetTime;<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private int mGreetCount;<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private int mGreetCount;<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>int<<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String name:EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        mGreetName = name;
        initGreetTimeCountMessage();
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>>String name<<<
parent=>>>
public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, String name:EcjPsiParameter, :TestWhitespace, 
]<<<
  PsiParameter -> String name

Node=PsiParameter
NodeImpl=EcjPsiParameter
Source=>>>String name<<<
parent=>>>
String name
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiParameter
Source=>>>String name<<<
parent=>>>
String name
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        mGreetName = name;
        initGreetTimeCountMessage();
    <<<
parent=>>>
public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, mGreetName = name:EcjPsiExpressionStatement, :TestWhitespace, initGreetTimeCountMessage():EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetName = name<<<
parent=>>>
{
        mGreetName = name;
        initGreetTimeCountMessage();
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetName = name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetName = name<<<
parent=>>>
{
        mGreetName = name;
        initGreetTimeCountMessage();
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetName = name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetName = name:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetName = name:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, name:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, name:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
{
        mGreetName = name;
        initGreetTimeCountMessage();
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, initGreetTimeCountMessage():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
{
        mGreetName = name;
        initGreetTimeCountMessage();
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, initGreetTimeCountMessage():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
initGreetTimeCountMessage()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, initGreetTimeCountMessage():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
initGreetTimeCountMessage()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, initGreetTimeCountMessage():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
initGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
initGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
initGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
initGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, initGreetTimeCountMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, initGreetTimeCountMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
initGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>OnlyShareMethodsGreet<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>OnlyShareMethodsGreet<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, :EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
// 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>><<<
parent=>>>
// 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    <<<
parent=>>>
// 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, mGreetMessage = "":EcjPsiExpressionStatement, :TestWhitespace, mGreetTime = 0L:EcjPsiExpressionStatement, :TestWhitespace, mGreetCount = 0:EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = ""<<<
parent=>>>
{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = ""<<<
parent=>>>
{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = ""<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = ""<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = ""<<<
parent=>>>
mGreetMessage = ""
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = ""<<<
parent=>>>
mGreetMessage = ""
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>""<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>""<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>""<<<
parent=>>>
""
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>""<<<
parent=>>>
""
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = 0L<<<
parent=>>>
{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = 0L:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = 0L<<<
parent=>>>
{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = 0L:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = 0L<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = 0L:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = 0L<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = 0L:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = 0L<<<
parent=>>>
mGreetTime = 0L
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, 0L:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = 0L<<<
parent=>>>
mGreetTime = 0L
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, 0L:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>0L<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, 0L:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>0L<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, 0L:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0L<<<
parent=>>>
0L
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0L<<<
parent=>>>
0L
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = 0<<<
parent=>>>
{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = 0<<<
parent=>>>
{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = 0<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = 0:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = 0<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = 0:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = 0<<<
parent=>>>
mGreetCount = 0
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = 0<<<
parent=>>>
mGreetCount = 0
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, :EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
// 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>><<<
parent=>>>
// 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    <<<
parent=>>>
// 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():EcjPsiExpressionStatement, :TestWhitespace, long dayOffset = getDayOffset(mGreetTime);:EcjPsiDeclarationStatement, :TestWhitespace, if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, mGreetCount = mGreetCount + 1:EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, System.currentTimeMillis():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, System.currentTimeMillis():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.currentTimeMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.currentTimeMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, currentTimeMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, currentTimeMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, currentTimeMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
System.currentTimeMillis()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long dayOffset = getDayOffset(mGreetTime);:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long dayOffset = getDayOffset(mGreetTime);:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, getDayOffset(mGreetTime):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, getDayOffset(mGreetTime):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, getDayOffset(mGreetTime):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, getDayOffset(mGreetTime):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, getDayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, getDayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>mGreetTime<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> mGreetTime

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):TestParentheses, :TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):TestParentheses, :TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= 0:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= 0:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "ZZZ...";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "ZZZ...";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "ZZZ...";
        }<<<
parent=>>>
{
            mGreetMessage = "ZZZ...";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
{
            mGreetMessage = "ZZZ...";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
{
            mGreetMessage = "ZZZ...";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "ZZZ...":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "ZZZ...":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"ZZZ..."<<<
parent=>>>
"ZZZ..."
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"ZZZ..."<<<
parent=>>>
"ZZZ..."
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おはようございます。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おはようございます。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "おはようございます。";
        }<<<
parent=>>>
{
            mGreetMessage = "おはようございます。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
{
            mGreetMessage = "おはようございます。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
{
            mGreetMessage = "おはようございます。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おはようございます。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おはようございます。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おはようございます。"<<<
parent=>>>
"おはようございます。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おはようございます。"<<<
parent=>>>
"おはようございます。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんにちは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんにちは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "こんにちは。";
        }<<<
parent=>>>
{
            mGreetMessage = "こんにちは。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
{
            mGreetMessage = "こんにちは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
{
            mGreetMessage = "こんにちは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんにちは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんにちは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんにちは。"<<<
parent=>>>
"こんにちは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんにちは。"<<<
parent=>>>
"こんにちは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんばんは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんばんは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "こんばんは。";
        }<<<
parent=>>>
{
            mGreetMessage = "こんばんは。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
{
            mGreetMessage = "こんばんは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
{
            mGreetMessage = "こんばんは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんばんは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんばんは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんばんは。"<<<
parent=>>>
"こんばんは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんばんは。"<<<
parent=>>>
"こんばんは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
{
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
{
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
{
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おやすみなさい。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おやすみなさい。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おやすみなさい。"<<<
parent=>>>
"おやすみなさい。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おやすみなさい。"<<<
parent=>>>
"おやすみなさい。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount + 1:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount + 1:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>1<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>1<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1<<<
parent=>>>
1
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1<<<
parent=>>>
1
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, :EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>><<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    <<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, createGreetTimeCountMessage():EcjPsiExpressionStatement, :TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, createGreetTimeCountMessage():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, createGreetTimeCountMessage():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, createGreetTimeCountMessage():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, createGreetTimeCountMessage():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "さん、":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "さん、":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"さん、"<<<
parent=>>>
"さん、"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"さん、"<<<
parent=>>>
"さん、"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, " (":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, " (":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>" ("<<<
parent=>>>
" ("
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>" ("<<<
parent=>>>
" ("
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "回目の挨拶)":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "回目の挨拶)":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"回目の挨拶)"<<<
parent=>>>
"回目の挨拶)"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"回目の挨拶)"<<<
parent=>>>
"回目の挨拶)"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>greet<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>greet<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, final long timeInMillis:EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>>final long timeInMillis<<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, final long timeInMillis:EcjPsiParameter, :TestWhitespace, 
]<<<
  PsiParameter -> final long timeInMillis

Node=PsiParameter
NodeImpl=EcjPsiParameter
Source=>>>final long timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiParameter
Source=>>>final long timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<
  PsiModifier -> final

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    <<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;:EcjPsiDeclarationStatement, :TestWhitespace, long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;:EcjPsiDeclarationStatement, :TestWhitespace, return fixedTimestamp - timestampOf12am;:EcjPsiReturnStatement, :TestWhitespace, 
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timeInMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timeInMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiReturnStatement
NodeImpl=EcjPsiReturnStatement
Source=>>>return fixedTimestamp - timestampOf12am;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiReturnStatement
Source=>>>return fixedTimestamp - timestampOf12am;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
return fixedTimestamp - timestampOf12am;
<<<:EcjPsiReturnStatement
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
return fixedTimestamp - timestampOf12am;
<<<:EcjPsiReturnStatement
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 24 * 3600 * 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 24 * 3600 * 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static
  PsiModifier -> final

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600 * 1000<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[:TestWhitespace, 24 * 3600 * 1000:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600 * 1000<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[:TestWhitespace, 24 * 3600 * 1000:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24 * 3600:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24 * 3600:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600<<<
parent=>>>
3600
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600<<<
parent=>>>
3600
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>1000<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>1000<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1000<<<
parent=>>>
1000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1000<<<
parent=>>>
1000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, TimeZone.getDefault().getRawOffset():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();<<<
parent=>>>
public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, TimeZone.getDefault().getRawOffset():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static
  PsiModifier -> final

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>int<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault():TestParentheses, :TestWhitespace, getRawOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault():TestParentheses, :TestWhitespace, getRawOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault():TestParentheses, :TestWhitespace, getRawOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone.getDefault():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone.getDefault():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:TestParentheses, :TestWhitespace, getDefault:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:TestParentheses, :TestWhitespace, getDefault:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:TestParentheses, :TestWhitespace, getDefault:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
TimeZone.getDefault()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

afterCheckFile (Ph.1) -> Source=>>>
package test.pkg;

import java.util.TimeZone;

public class OnlyShareMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public OnlyShareMethodsGreet(String name) {
        mGreetName = name;
        initGreetTimeCountMessage();
    }

    // 状態変更共有メソッド（唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<

beforeCheckFile (Ph.1) -> Source=>>>
package test.pkg;

import java.util.TimeZone;

public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<

Node=PsiJavaFile
NodeImpl=EcjPsiJavaFile
Source=>>>package test.pkg;

import java.util.TimeZone;

public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<
parent=null:null
children=>>>[:TestWhitespace, package test.pkg;:EcjPsiPackageStatement, :TestWhitespace, import java.util.TimeZone;:EcjPsiImportList, :TestWhitespace, public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}:EcjPsiClass, :TestWhitespace, 
]<<<

Node=PsiPackageStatement
NodeImpl=EcjPsiPackageStatement
Source=>>>package test.pkg;<<<
parent=>>>
package test.pkg;

import java.util.TimeZone;

public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<:EcjPsiJavaFile
children=>>>[
]<<<

Node=PsiImportList
NodeImpl=EcjPsiImportList
Source=>>>import java.util.TimeZone;<<<
parent=>>>
package test.pkg;

import java.util.TimeZone;

public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<:EcjPsiJavaFile
children=>>>[:TestWhitespace, import java.util.TimeZone;:EcjPsiImport, :TestWhitespace, 
]<<<

Node=PsiImportStatement
NodeImpl=EcjPsiImport
Source=>>>import java.util.TimeZone;<<<
parent=>>>
import java.util.TimeZone;
<<<:EcjPsiImportList
children=>>>[:TestWhitespace, java.util.TimeZone:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>java.util.TimeZone<<<
parent=>>>
import java.util.TimeZone;
<<<:EcjPsiImport
children=>>>[:TestWhitespace, java.util:EcjPsiJavaCodeReferenceElement, :TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>java.util<<<
parent=>>>
java.util.TimeZone
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[:TestWhitespace, java:EcjPsiJavaCodeReferenceElement, :TestWhitespace, util:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>java<<<
parent=>>>
java.util
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[:TestWhitespace, java:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>java<<<
parent=>>>
java
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>java<<<
parent=>>>
java
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>util<<<
parent=>>>
java.util
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>util<<<
parent=>>>
java.util
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
java.util.TimeZone
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
java.util.TimeZone
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiClass
NodeImpl=EcjPsiClass
Source=>>>public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}<<<
parent=>>>
package test.pkg;

import java.util.TimeZone;

public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<:EcjPsiJavaFile
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, ShareAndSingleMethodsGreet:EcjPsiIdentifier, :TestWhitespace, :EcjPsiTypeParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, private String mGreetName;:EcjPsiField, :TestWhitespace, private String mGreetMessage;:EcjPsiField, :TestWhitespace, private long mGreetTime;:EcjPsiField, :TestWhitespace, private int mGreetCount;:EcjPsiField, :TestWhitespace, public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }:EcjPsiMethod, :TestWhitespace, ShareAndSingleMethodsGreet:EcjPsiIdentifier, :TestWhitespace, // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }:EcjPsiMethod, :TestWhitespace, init:EcjPsiIdentifier, :TestWhitespace, // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }:EcjPsiMethod, :TestWhitespace, initGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }:EcjPsiMethod, :TestWhitespace, createGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }:EcjPsiMethod, :TestWhitespace, greet:EcjPsiIdentifier, :TestWhitespace, // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }:EcjPsiMethod, :TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;:EcjPsiField, :TestWhitespace, private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();:EcjPsiField, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>ShareAndSingleMethodsGreet<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>ShareAndSingleMethodsGreet<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiTypeParameterList
NodeImpl=EcjPsiTypeParameterList
Source=>>><<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private String mGreetName;<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private String mGreetName;<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private String mGreetMessage;<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private String mGreetMessage;<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private long mGreetTime;<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private long mGreetTime;<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private int mGreetCount;<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private int mGreetCount;<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>int<<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String name:EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        init(name);
        initGreetTimeCountMessage();
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>>String name<<<
parent=>>>
public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, String name:EcjPsiParameter, :TestWhitespace, 
]<<<
  PsiParameter -> String name

Node=PsiParameter
NodeImpl=EcjPsiParameter
Source=>>>String name<<<
parent=>>>
String name
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiParameter
Source=>>>String name<<<
parent=>>>
String name
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        init(name);
        initGreetTimeCountMessage();
    <<<
parent=>>>
public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, init(name):EcjPsiExpressionStatement, :TestWhitespace, initGreetTimeCountMessage():EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>init(name)<<<
parent=>>>
{
        init(name);
        initGreetTimeCountMessage();
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, init(name):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>init(name)<<<
parent=>>>
{
        init(name);
        initGreetTimeCountMessage();
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, init(name):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>init(name)<<<
parent=>>>
init(name)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, init(name):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>init(name)<<<
parent=>>>
init(name)
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, init(name):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>init(name)<<<
parent=>>>
init(name)
<<<:TestParentheses
children=>>>[:TestWhitespace, init:TestParentheses, :TestWhitespace, name:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>init(name)<<<
parent=>>>
init(name)
<<<:TestParentheses
children=>>>[:TestWhitespace, init:TestParentheses, :TestWhitespace, name:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>init(name)<<<
parent=>>>
init(name)
<<<:TestParentheses
children=>>>[:TestWhitespace, init:TestParentheses, :TestWhitespace, name:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>init(name)<<<
parent=>>>
init(name)
<<<:TestParentheses
children=>>>[:TestWhitespace, init:TestParentheses, :TestWhitespace, name:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>init<<<
parent=>>>
init(name)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, init:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>init<<<
parent=>>>
init(name)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, init:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>init<<<
parent=>>>
init
<<<:TestParentheses
children=>>>[:TestWhitespace, init:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>init<<<
parent=>>>
init
<<<:TestParentheses
children=>>>[:TestWhitespace, init:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>init<<<
parent=>>>
init
<<<:TestParentheses
children=>>>[:TestWhitespace, init:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>init<<<
parent=>>>
init
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>init<<<
parent=>>>
init
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>name<<<
parent=>>>
init(name)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, name:TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> name

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, name:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, name:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
{
        init(name);
        initGreetTimeCountMessage();
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, initGreetTimeCountMessage():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
{
        init(name);
        initGreetTimeCountMessage();
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, initGreetTimeCountMessage():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
initGreetTimeCountMessage()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, initGreetTimeCountMessage():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
initGreetTimeCountMessage()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, initGreetTimeCountMessage():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
initGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
initGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
initGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>initGreetTimeCountMessage()<<<
parent=>>>
initGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, initGreetTimeCountMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, initGreetTimeCountMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, initGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
initGreetTimeCountMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
initGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>ShareAndSingleMethodsGreet<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>ShareAndSingleMethodsGreet<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, String name:EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        mGreetName = name;
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
// 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>>String name<<<
parent=>>>
// 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, String name:EcjPsiParameter, :TestWhitespace, 
]<<<
  PsiParameter -> String name

Node=PsiParameter
NodeImpl=EcjPsiParameter
Source=>>>String name<<<
parent=>>>
String name
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiParameter
Source=>>>String name<<<
parent=>>>
String name
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        mGreetName = name;
    <<<
parent=>>>
// 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, mGreetName = name:EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetName = name<<<
parent=>>>
{
        mGreetName = name;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetName = name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetName = name<<<
parent=>>>
{
        mGreetName = name;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetName = name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetName = name:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetName = name:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, name:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, name:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>init<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>init<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, :EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
// 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>><<<
parent=>>>
// 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    <<<
parent=>>>
// 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, mGreetMessage = "":EcjPsiExpressionStatement, :TestWhitespace, mGreetTime = 0L:EcjPsiExpressionStatement, :TestWhitespace, mGreetCount = 0:EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = ""<<<
parent=>>>
{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = ""<<<
parent=>>>
{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = ""<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = ""<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = ""<<<
parent=>>>
mGreetMessage = ""
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = ""<<<
parent=>>>
mGreetMessage = ""
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>""<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>""<<<
parent=>>>
mGreetMessage = ""
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>""<<<
parent=>>>
""
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>""<<<
parent=>>>
""
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = 0L<<<
parent=>>>
{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = 0L:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = 0L<<<
parent=>>>
{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = 0L:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = 0L<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = 0L:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = 0L<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = 0L:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = 0L<<<
parent=>>>
mGreetTime = 0L
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, 0L:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = 0L<<<
parent=>>>
mGreetTime = 0L
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, 0L:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>0L<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, 0L:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>0L<<<
parent=>>>
mGreetTime = 0L
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, 0L:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0L<<<
parent=>>>
0L
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0L<<<
parent=>>>
0L
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = 0<<<
parent=>>>
{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = 0<<<
parent=>>>
{
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = 0<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = 0:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = 0<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = 0:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = 0<<<
parent=>>>
mGreetCount = 0
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = 0<<<
parent=>>>
mGreetCount = 0
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
mGreetCount = 0
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>initGreetTimeCountMessage<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, :EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
// 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>><<<
parent=>>>
// 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    <<<
parent=>>>
// 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():EcjPsiExpressionStatement, :TestWhitespace, long dayOffset = getDayOffset(mGreetTime);:EcjPsiDeclarationStatement, :TestWhitespace, if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, mGreetCount = mGreetCount + 1:EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, System.currentTimeMillis():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, System.currentTimeMillis():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.currentTimeMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.currentTimeMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, currentTimeMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, currentTimeMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, currentTimeMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
System.currentTimeMillis()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long dayOffset = getDayOffset(mGreetTime);:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long dayOffset = getDayOffset(mGreetTime);:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, getDayOffset(mGreetTime):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, getDayOffset(mGreetTime):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, getDayOffset(mGreetTime):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, getDayOffset(mGreetTime):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, getDayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, getDayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>mGreetTime<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> mGreetTime

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):TestParentheses, :TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):TestParentheses, :TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= 0:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= 0:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "ZZZ...";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "ZZZ...";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "ZZZ...";
        }<<<
parent=>>>
{
            mGreetMessage = "ZZZ...";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
{
            mGreetMessage = "ZZZ...";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
{
            mGreetMessage = "ZZZ...";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "ZZZ...":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "ZZZ...":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"ZZZ..."<<<
parent=>>>
"ZZZ..."
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"ZZZ..."<<<
parent=>>>
"ZZZ..."
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おはようございます。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おはようございます。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "おはようございます。";
        }<<<
parent=>>>
{
            mGreetMessage = "おはようございます。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
{
            mGreetMessage = "おはようございます。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
{
            mGreetMessage = "おはようございます。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おはようございます。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おはようございます。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おはようございます。"<<<
parent=>>>
"おはようございます。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おはようございます。"<<<
parent=>>>
"おはようございます。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんにちは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんにちは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "こんにちは。";
        }<<<
parent=>>>
{
            mGreetMessage = "こんにちは。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
{
            mGreetMessage = "こんにちは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
{
            mGreetMessage = "こんにちは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんにちは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんにちは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんにちは。"<<<
parent=>>>
"こんにちは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんにちは。"<<<
parent=>>>
"こんにちは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんばんは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんばんは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "こんばんは。";
        }<<<
parent=>>>
{
            mGreetMessage = "こんばんは。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
{
            mGreetMessage = "こんばんは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
{
            mGreetMessage = "こんばんは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんばんは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんばんは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんばんは。"<<<
parent=>>>
"こんばんは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんばんは。"<<<
parent=>>>
"こんばんは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
{
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
{
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
{
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おやすみなさい。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おやすみなさい。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おやすみなさい。"<<<
parent=>>>
"おやすみなさい。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おやすみなさい。"<<<
parent=>>>
"おやすみなさい。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount + 1:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount + 1:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>1<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>1<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1<<<
parent=>>>
1
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1<<<
parent=>>>
1
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, :EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>><<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    <<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, createGreetTimeCountMessage():EcjPsiExpressionStatement, :TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, createGreetTimeCountMessage():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, createGreetTimeCountMessage():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, createGreetTimeCountMessage():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, createGreetTimeCountMessage():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "さん、":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "さん、":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"さん、"<<<
parent=>>>
"さん、"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"さん、"<<<
parent=>>>
"さん、"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, " (":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, " (":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>" ("<<<
parent=>>>
" ("
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>" ("<<<
parent=>>>
" ("
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "回目の挨拶)":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "回目の挨拶)":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"回目の挨拶)"<<<
parent=>>>
"回目の挨拶)"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"回目の挨拶)"<<<
parent=>>>
"回目の挨拶)"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>greet<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>greet<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, final long timeInMillis:EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>>final long timeInMillis<<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, final long timeInMillis:EcjPsiParameter, :TestWhitespace, 
]<<<
  PsiParameter -> final long timeInMillis

Node=PsiParameter
NodeImpl=EcjPsiParameter
Source=>>>final long timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiParameter
Source=>>>final long timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<
  PsiModifier -> final

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    <<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;:EcjPsiDeclarationStatement, :TestWhitespace, long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;:EcjPsiDeclarationStatement, :TestWhitespace, return fixedTimestamp - timestampOf12am;:EcjPsiReturnStatement, :TestWhitespace, 
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timeInMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timeInMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiReturnStatement
NodeImpl=EcjPsiReturnStatement
Source=>>>return fixedTimestamp - timestampOf12am;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiReturnStatement
Source=>>>return fixedTimestamp - timestampOf12am;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
return fixedTimestamp - timestampOf12am;
<<<:EcjPsiReturnStatement
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
return fixedTimestamp - timestampOf12am;
<<<:EcjPsiReturnStatement
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 24 * 3600 * 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 24 * 3600 * 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static
  PsiModifier -> final

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600 * 1000<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[:TestWhitespace, 24 * 3600 * 1000:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600 * 1000<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[:TestWhitespace, 24 * 3600 * 1000:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24 * 3600:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24 * 3600:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600<<<
parent=>>>
3600
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600<<<
parent=>>>
3600
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>1000<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>1000<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1000<<<
parent=>>>
1000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1000<<<
parent=>>>
1000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, TimeZone.getDefault().getRawOffset():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();<<<
parent=>>>
public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, TimeZone.getDefault().getRawOffset():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static
  PsiModifier -> final

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>int<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault():TestParentheses, :TestWhitespace, getRawOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault():TestParentheses, :TestWhitespace, getRawOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault():TestParentheses, :TestWhitespace, getRawOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone.getDefault():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone.getDefault():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:TestParentheses, :TestWhitespace, getDefault:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:TestParentheses, :TestWhitespace, getDefault:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:TestParentheses, :TestWhitespace, getDefault:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
TimeZone.getDefault()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

afterCheckFile (Ph.1) -> Source=>>>
package test.pkg;

import java.util.TimeZone;

public class ShareAndSingleMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public ShareAndSingleMethodsGreet(String name) {
        init(name);
        initGreetTimeCountMessage();
    }

    // 状態変更独立メソッド
    private void init(String name) {
        mGreetName = name;
    }

    // 状態変更共有メソッド（非唯一）
    private void initGreetTimeCountMessage() {
        mGreetMessage = "";
        mGreetTime = 0L;
        mGreetCount = 0;
    }

    // 状態変更共有メソッド（非唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<

beforeCheckFile (Ph.1) -> Source=>>>
package test.pkg;

import java.util.TimeZone;

public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<

Node=PsiJavaFile
NodeImpl=EcjPsiJavaFile
Source=>>>package test.pkg;

import java.util.TimeZone;

public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<
parent=null:null
children=>>>[:TestWhitespace, package test.pkg;:EcjPsiPackageStatement, :TestWhitespace, import java.util.TimeZone;:EcjPsiImportList, :TestWhitespace, public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}:EcjPsiClass, :TestWhitespace, 
]<<<

Node=PsiPackageStatement
NodeImpl=EcjPsiPackageStatement
Source=>>>package test.pkg;<<<
parent=>>>
package test.pkg;

import java.util.TimeZone;

public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<:EcjPsiJavaFile
children=>>>[
]<<<

Node=PsiImportList
NodeImpl=EcjPsiImportList
Source=>>>import java.util.TimeZone;<<<
parent=>>>
package test.pkg;

import java.util.TimeZone;

public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<:EcjPsiJavaFile
children=>>>[:TestWhitespace, import java.util.TimeZone;:EcjPsiImport, :TestWhitespace, 
]<<<

Node=PsiImportStatement
NodeImpl=EcjPsiImport
Source=>>>import java.util.TimeZone;<<<
parent=>>>
import java.util.TimeZone;
<<<:EcjPsiImportList
children=>>>[:TestWhitespace, java.util.TimeZone:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>java.util.TimeZone<<<
parent=>>>
import java.util.TimeZone;
<<<:EcjPsiImport
children=>>>[:TestWhitespace, java.util:EcjPsiJavaCodeReferenceElement, :TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>java.util<<<
parent=>>>
java.util.TimeZone
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[:TestWhitespace, java:EcjPsiJavaCodeReferenceElement, :TestWhitespace, util:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>java<<<
parent=>>>
java.util
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[:TestWhitespace, java:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>java<<<
parent=>>>
java
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>java<<<
parent=>>>
java
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>util<<<
parent=>>>
java.util
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>util<<<
parent=>>>
java.util
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
java.util.TimeZone
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
java.util.TimeZone
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiClass
NodeImpl=EcjPsiClass
Source=>>>public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}<<<
parent=>>>
package test.pkg;

import java.util.TimeZone;

public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<:EcjPsiJavaFile
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, SrpMethodsGreet:EcjPsiIdentifier, :TestWhitespace, :EcjPsiTypeParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, private String mGreetName;:EcjPsiField, :TestWhitespace, private String mGreetMessage;:EcjPsiField, :TestWhitespace, private long mGreetTime;:EcjPsiField, :TestWhitespace, private int mGreetCount;:EcjPsiField, :TestWhitespace, public SrpMethodsGreet(String name) {
        mGreetName = name;
    }:EcjPsiMethod, :TestWhitespace, SrpMethodsGreet:EcjPsiIdentifier, :TestWhitespace, // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }:EcjPsiMethod, :TestWhitespace, createGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }:EcjPsiMethod, :TestWhitespace, greet:EcjPsiIdentifier, :TestWhitespace, // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }:EcjPsiMethod, :TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;:EcjPsiField, :TestWhitespace, private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();:EcjPsiField, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>SrpMethodsGreet<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>SrpMethodsGreet<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiTypeParameterList
NodeImpl=EcjPsiTypeParameterList
Source=>>><<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private String mGreetName;<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private String mGreetName;<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
private String mGreetName;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private String mGreetMessage;<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private String mGreetMessage;<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
private String mGreetMessage;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private long mGreetTime;<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private long mGreetTime;<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
private long mGreetTime;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private int mGreetCount;<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private int mGreetCount;<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>int<<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
private int mGreetCount;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>public SrpMethodsGreet(String name) {
        mGreetName = name;
    }<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String name:EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        mGreetName = name;
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
public SrpMethodsGreet(String name) {
        mGreetName = name;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>>String name<<<
parent=>>>
public SrpMethodsGreet(String name) {
        mGreetName = name;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, String name:EcjPsiParameter, :TestWhitespace, 
]<<<
  PsiParameter -> String name

Node=PsiParameter
NodeImpl=EcjPsiParameter
Source=>>>String name<<<
parent=>>>
String name
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiParameter
Source=>>>String name<<<
parent=>>>
String name
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, String:EcjPsiTypeElement, :TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>String<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[:TestWhitespace, String:EcjPsiJavaCodeReferenceElement, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiJavaCodeReferenceElement
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiTypeElement
children=>>>[:TestWhitespace, String:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>String<<<
parent=>>>
String
<<<:EcjPsiJavaCodeReferenceElement
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
String name
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
public SrpMethodsGreet(String name) {
        mGreetName = name;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        mGreetName = name;
    <<<
parent=>>>
public SrpMethodsGreet(String name) {
        mGreetName = name;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, mGreetName = name:EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetName = name<<<
parent=>>>
{
        mGreetName = name;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetName = name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetName = name<<<
parent=>>>
{
        mGreetName = name;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetName = name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetName = name:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetName = name:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetName = name<<<
parent=>>>
mGreetName = name
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, name:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, name:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>name<<<
parent=>>>
mGreetName = name
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, name:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>name<<<
parent=>>>
name
<<<:TestParentheses
children=>>>[:TestWhitespace, name:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>name<<<
parent=>>>
name
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>SrpMethodsGreet<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>SrpMethodsGreet<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, :EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> private

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
// 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>><<<
parent=>>>
// 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    <<<
parent=>>>
// 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():EcjPsiExpressionStatement, :TestWhitespace, long dayOffset = getDayOffset(mGreetTime);:EcjPsiDeclarationStatement, :TestWhitespace, if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, mGreetCount = mGreetCount + 1:EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetTime = System.currentTimeMillis():EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetTime = System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, System.currentTimeMillis():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, System.currentTimeMillis():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis()<<<
parent=>>>
mGreetTime = System.currentTimeMillis()
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, System.currentTimeMillis():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.currentTimeMillis()<<<
parent=>>>
System.currentTimeMillis()
<<<:TestParentheses
children=>>>[:TestWhitespace, System.currentTimeMillis:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.currentTimeMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.currentTimeMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, currentTimeMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, currentTimeMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, currentTimeMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>currentTimeMillis<<<
parent=>>>
System.currentTimeMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
System.currentTimeMillis()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long dayOffset = getDayOffset(mGreetTime);:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long dayOffset = getDayOffset(mGreetTime);:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, getDayOffset(mGreetTime):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long dayOffset = getDayOffset(mGreetTime);<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, getDayOffset(mGreetTime):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, getDayOffset(mGreetTime):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
long dayOffset = getDayOffset(mGreetTime);
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, getDayOffset(mGreetTime):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>getDayOffset(mGreetTime)<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:TestParentheses, :TestWhitespace, mGreetTime:EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, getDayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, getDayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, getDayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
getDayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>mGreetTime<<<
parent=>>>
getDayOffset(mGreetTime)
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, mGreetTime:TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> mGreetTime

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetTime:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetTime:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetTime<<<
parent=>>>
mGreetTime
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):TestParentheses, :TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):TestParentheses, :TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= 0 && dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0 && dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= 0:TestParentheses, :TestWhitespace, dayOffset < (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= 0:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= 0:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= 0<<<
parent=>>>
dayOffset >= 0
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, 0:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>0<<<
parent=>>>
dayOffset >= 0
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 0:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>0<<<
parent=>>>
0
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset >= 0 && dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset < (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "ZZZ...";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "ZZZ...";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "ZZZ...";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "ZZZ...";
        }<<<
parent=>>>
{
            mGreetMessage = "ZZZ...";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
{
            mGreetMessage = "ZZZ...";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
{
            mGreetMessage = "ZZZ...";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "ZZZ...":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "ZZZ...":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "ZZZ...":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"ZZZ..."<<<
parent=>>>
mGreetMessage = "ZZZ..."
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "ZZZ...":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"ZZZ..."<<<
parent=>>>
"ZZZ..."
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"ZZZ..."<<<
parent=>>>
"ZZZ..."
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*6) && dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6) && dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):TestParentheses, :TestWhitespace, dayOffset < (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*6):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*6)<<<
parent=>>>
dayOffset >= (3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*6):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*6)<<<
parent=>>>
(3600000*6)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 6:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>6<<<
parent=>>>
(3600000*6)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 6:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>6<<<
parent=>>>
6
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*6) && dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset < (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おはようございます。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おはようございます。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おはようございます。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "おはようございます。";
        }<<<
parent=>>>
{
            mGreetMessage = "おはようございます。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
{
            mGreetMessage = "おはようございます。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
{
            mGreetMessage = "おはようございます。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おはようございます。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おはようございます。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おはようございます。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"おはようございます。"<<<
parent=>>>
mGreetMessage = "おはようございます。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おはようございます。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おはようございます。"<<<
parent=>>>
"おはようございます。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おはようございます。"<<<
parent=>>>
"おはようございます。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*10) && dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10) && dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):TestParentheses, :TestWhitespace, dayOffset < (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*10):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*10)<<<
parent=>>>
dayOffset >= (3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*10):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*10)<<<
parent=>>>
(3600000*10)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 10:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>10<<<
parent=>>>
(3600000*10)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 10:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>10<<<
parent=>>>
10
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*10) && dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset < (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんにちは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんにちは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんにちは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "こんにちは。";
        }<<<
parent=>>>
{
            mGreetMessage = "こんにちは。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
{
            mGreetMessage = "こんにちは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
{
            mGreetMessage = "こんにちは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんにちは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんにちは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんにちは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"こんにちは。"<<<
parent=>>>
mGreetMessage = "こんにちは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんにちは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんにちは。"<<<
parent=>>>
"こんにちは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんにちは。"<<<
parent=>>>
"こんにちは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):TestParentheses, :TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiBlockStatement, :TestWhitespace, if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiIfStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*18) && dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18) && dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):TestParentheses, :TestWhitespace, dayOffset < (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*18):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*18)<<<
parent=>>>
dayOffset >= (3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*18):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*18)<<<
parent=>>>
(3600000*18)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 18:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>18<<<
parent=>>>
(3600000*18)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 18:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>18<<<
parent=>>>
18
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*18) && dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset < (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんばんは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "こんばんは。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "こんばんは。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "こんばんは。";
        }<<<
parent=>>>
{
            mGreetMessage = "こんばんは。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
{
            mGreetMessage = "こんばんは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
{
            mGreetMessage = "こんばんは。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "こんばんは。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "こんばんは。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんばんは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"こんばんは。"<<<
parent=>>>
mGreetMessage = "こんばんは。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "こんばんは。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんばんは。"<<<
parent=>>>
"こんばんは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"こんばんは。"<<<
parent=>>>
"こんばんは。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIfStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiIfStatement
Source=>>>if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):TestParentheses, :TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiBlockStatement, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, dayOffset >= (3600000*21) && dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21) && dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):TestParentheses, :TestWhitespace, dayOffset < (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset >= (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset >= (3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*21):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*21)<<<
parent=>>>
dayOffset >= (3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*21):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*21)<<<
parent=>>>
(3600000*21)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 21:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>21<<<
parent=>>>
(3600000*21)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 21:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>21<<<
parent=>>>
21
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset >= (3600000*21) && dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset < (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>dayOffset < (3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:TestParentheses, :TestWhitespace, (3600000*24):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>dayOffset<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, dayOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, dayOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>dayOffset<<<
parent=>>>
dayOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(3600000*24)<<<
parent=>>>
dayOffset < (3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (3600000*24):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(3600000*24)<<<
parent=>>>
(3600000*24)
<<<:TestParentheses
children=>>>[:TestWhitespace, 3600000:TestParentheses, :TestWhitespace, 24:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600000<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600000<<<
parent=>>>
3600000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
(3600000*24)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiBlockStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiBlockStatement
Source=>>>{
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiIfStatement
children=>>>[:TestWhitespace, {
            mGreetMessage = "おやすみなさい。";
        }:EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
            mGreetMessage = "おやすみなさい。";
        }<<<
parent=>>>
{
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiBlockStatement
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
{
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
{
            mGreetMessage = "おやすみなさい。";
        }
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetMessage = "おやすみなさい。":EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetMessage = "おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, "おやすみなさい。":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おやすみなさい。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"おやすみなさい。"<<<
parent=>>>
mGreetMessage = "おやすみなさい。"
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, "おやすみなさい。":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おやすみなさい。"<<<
parent=>>>
"おやすみなさい。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"おやすみなさい。"<<<
parent=>>>
"おやすみなさい。"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
{
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, mGreetCount = mGreetCount + 1:EcjPsiAssignmentExpression, :TestWhitespace, 
]<<<

Node=PsiAssignmentExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiAssignmentExpression
Source=>>>mGreetCount = mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, mGreetCount + 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount + 1:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount = mGreetCount + 1
<<<:EcjPsiAssignmentExpression
children=>>>[:TestWhitespace, mGreetCount + 1:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetCount + 1<<<
parent=>>>
mGreetCount + 1
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 1:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>1<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>1<<<
parent=>>>
mGreetCount + 1
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1<<<
parent=>>>
1
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1<<<
parent=>>>
1
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, void:EcjPsiTypeElement, :TestWhitespace, :EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> public

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>void<<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>><<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    <<<
parent=>>>
// 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, createGreetTimeCountMessage():EcjPsiExpressionStatement, :TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):EcjPsiExpressionStatement, :TestWhitespace, 
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, createGreetTimeCountMessage():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, createGreetTimeCountMessage():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, createGreetTimeCountMessage():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, createGreetTimeCountMessage():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>createGreetTimeCountMessage()<<<
parent=>>>
createGreetTimeCountMessage()
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, createGreetTimeCountMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>createGreetTimeCountMessage<<<
parent=>>>
createGreetTimeCountMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
createGreetTimeCountMessage()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiExpressionStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiExpressionStatement
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
{
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiExpressionStatement
children=>>>[:TestWhitespace, System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"):EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out.println:TestParentheses, :TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out.println<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, System.out.println:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out.println<<<
parent=>>>
System.out.println
<<<:TestParentheses
children=>>>[:TestWhitespace, System.out:TestParentheses, :TestWhitespace, println:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System.out<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System.out:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System.out<<<
parent=>>>
System.out
<<<:TestParentheses
children=>>>[:TestWhitespace, System:TestParentheses, :TestWhitespace, out:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>System<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, System:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>System<<<
parent=>>>
System
<<<:TestParentheses
children=>>>[:TestWhitespace, System:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>System<<<
parent=>>>
System
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>out<<<
parent=>>>
System.out
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>println<<<
parent=>>>
System.out.println
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)")
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<
  PsiExpression -> mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiExpressionList
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:TestParentheses, :TestWhitespace, "回目の挨拶)":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":TestParentheses, :TestWhitespace, mGreetCount:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage+" (":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage+" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:TestParentheses, :TestWhitespace, " (":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、"+mGreetMessage:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"+mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName+"さん、":TestParentheses, :TestWhitespace, mGreetMessage:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName+"さん、":EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>mGreetName+"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:TestParentheses, :TestWhitespace, "さん、":TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetName<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetName:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetName:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetName<<<
parent=>>>
mGreetName
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "さん、":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"さん、"<<<
parent=>>>
mGreetName+"さん、"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "さん、":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"さん、"<<<
parent=>>>
"さん、"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"さん、"<<<
parent=>>>
"さん、"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetMessage<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetMessage:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetMessage<<<
parent=>>>
mGreetMessage
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, " (":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>" ("<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, " (":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>" ("<<<
parent=>>>
" ("
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>" ("<<<
parent=>>>
" ("
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>mGreetCount<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, mGreetCount:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:TestParentheses
children=>>>[:TestWhitespace, mGreetCount:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>mGreetCount<<<
parent=>>>
mGreetCount
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "回目の挨拶)":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>"回目の挨拶)"<<<
parent=>>>
mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)"
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, "回目の挨拶)":EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"回目の挨拶)"<<<
parent=>>>
"回目の挨拶)"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>"回目の挨拶)"<<<
parent=>>>
"回目の挨拶)"
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>greet<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>greet<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiMethod
NodeImpl=EcjPsiMethod
Source=>>>// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, final long timeInMillis:EcjPsiParameterList, :TestWhitespace, :EcjPsiReferenceList, :TestWhitespace, {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    :EcjPsiCodeBlock, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiParameterList
NodeImpl=EcjPsiParameterList
Source=>>>final long timeInMillis<<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, final long timeInMillis:EcjPsiParameter, :TestWhitespace, 
]<<<
  PsiParameter -> final long timeInMillis

Node=PsiParameter
NodeImpl=EcjPsiParameter
Source=>>>final long timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiParameter
Source=>>>final long timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameterList
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<
  PsiModifier -> final

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
final long timeInMillis
<<<:EcjPsiParameter
children=>>>[
]<<<

Node=PsiReferenceList
NodeImpl=EcjPsiReferenceList
Source=>>><<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[
]<<<

Node=PsiCodeBlock
NodeImpl=EcjPsiCodeBlock
Source=>>>{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    <<<
parent=>>>
// 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
<<<:EcjPsiMethod
children=>>>[:TestWhitespace, long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;:EcjPsiDeclarationStatement, :TestWhitespace, long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;:EcjPsiDeclarationStatement, :TestWhitespace, return fixedTimestamp - timestampOf12am;:EcjPsiReturnStatement, :TestWhitespace, 
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, timeInMillis + TIMEZONE_OFFSET_MILLISECOND:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>timeInMillis + TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:TestParentheses, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timeInMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timeInMillis:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:TestParentheses
children=>>>[:TestWhitespace, timeInMillis:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timeInMillis<<<
parent=>>>
timeInMillis
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
timeInMillis + TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:TestParentheses
children=>>>[:TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
TIMEZONE_OFFSET_MILLISECOND
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiDeclarationStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiDeclarationStatement
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;:EcjPsiLocalVariable, :TestWhitespace, 
]<<<

Node=PsiLocalVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiLocalVariable
Source=>>>long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiDeclarationStatement
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
<<<:EcjPsiLocalVariable
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, (fixedTimestamp / MILLISECOND_AT_A_DAY):EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>(fixedTimestamp / MILLISECOND_AT_A_DAY)<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, MILLISECOND_AT_A_DAY:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY)
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
(fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:TestParentheses
children=>>>[:TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
MILLISECOND_AT_A_DAY
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiReturnStatement
NodeImpl=EcjPsiReturnStatement
Source=>>>return fixedTimestamp - timestampOf12am;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiStatement
NodeImpl=EcjPsiReturnStatement
Source=>>>return fixedTimestamp - timestampOf12am;<<<
parent=>>>
{
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    
<<<:EcjPsiCodeBlock
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
return fixedTimestamp - timestampOf12am;
<<<:EcjPsiReturnStatement
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
return fixedTimestamp - timestampOf12am;
<<<:EcjPsiReturnStatement
children=>>>[:TestWhitespace, fixedTimestamp - timestampOf12am:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>fixedTimestamp - timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:TestParentheses, :TestWhitespace, timestampOf12am:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:TestParentheses
children=>>>[:TestWhitespace, fixedTimestamp:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>fixedTimestamp<<<
parent=>>>
fixedTimestamp
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>timestampOf12am<<<
parent=>>>
fixedTimestamp - timestampOf12am
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:TestParentheses
children=>>>[:TestWhitespace, timestampOf12am:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>timestampOf12am<<<
parent=>>>
timestampOf12am
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getDayOffset<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 24 * 3600 * 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, long:EcjPsiTypeElement, :TestWhitespace, MILLISECOND_AT_A_DAY:EcjPsiIdentifier, :TestWhitespace, 24 * 3600 * 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static
  PsiModifier -> final

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>long<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>MILLISECOND_AT_A_DAY<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600 * 1000<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[:TestWhitespace, 24 * 3600 * 1000:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600 * 1000<<<
parent=>>>
private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
<<<:EcjPsiField
children=>>>[:TestWhitespace, 24 * 3600 * 1000:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600 * 1000<<<
parent=>>>
24 * 3600 * 1000
<<<:TestParentheses
children=>>>[:TestWhitespace, 24 * 3600:TestParentheses, :TestWhitespace, 1000:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24 * 3600:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24 * 3600:EcjPsiBinaryExpression, :TestWhitespace, 
]<<<

Node=PsiBinaryExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiPolyadicExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiBinaryExpression
Source=>>>24 * 3600<<<
parent=>>>
24 * 3600
<<<:TestParentheses
children=>>>[:TestWhitespace, 24:TestParentheses, :TestWhitespace, 3600:TestParentheses, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>24<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 24:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>24<<<
parent=>>>
24
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>3600<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>3600<<<
parent=>>>
24 * 3600
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 3600:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600<<<
parent=>>>
3600
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>3600<<<
parent=>>>
3600
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>1000<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>1000<<<
parent=>>>
24 * 3600 * 1000
<<<:EcjPsiBinaryExpression
children=>>>[:TestWhitespace, 1000:EcjPsiLiteralExpression, :TestWhitespace, 
]<<<

Node=PsiLiteralExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1000<<<
parent=>>>
1000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiExpression
NodeImpl=EcjPsiLiteralExpression
Source=>>>1000<<<
parent=>>>
1000
<<<:TestParentheses
children=>>>[
]<<<

Node=PsiField
NodeImpl=EcjPsiField
Source=>>>private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, TimeZone.getDefault().getRawOffset():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiVariable
NodeImpl=EcjPsiField
Source=>>>private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();<<<
parent=>>>
public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}
<<<:EcjPsiClass
children=>>>[:TestWhitespace, :EcjPsiModifierList, :TestWhitespace, int:EcjPsiTypeElement, :TestWhitespace, TIMEZONE_OFFSET_MILLISECOND:EcjPsiIdentifier, :TestWhitespace, TimeZone.getDefault().getRawOffset():TestParentheses, :TestWhitespace, 
]<<<

Node=PsiModifierList
NodeImpl=EcjPsiModifierList
Source=>>><<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<
  PsiModifier -> private
  PsiModifier -> static
  PsiModifier -> final

Node=PsiTypeElement
NodeImpl=EcjPsiTypeElement
Source=>>>int<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TIMEZONE_OFFSET_MILLISECOND<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
<<<:EcjPsiField
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault().getRawOffset()<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault().getRawOffset:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault():TestParentheses, :TestWhitespace, getRawOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault():TestParentheses, :TestWhitespace, getRawOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault().getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault():TestParentheses, :TestWhitespace, getRawOffset:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone.getDefault():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone.getDefault():EcjPsiMethodCallExpression, :TestWhitespace, 
]<<<

Node=PsiMethodCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiCallExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiMethodCallExpression
Source=>>>TimeZone.getDefault()<<<
parent=>>>
TimeZone.getDefault()
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone.getDefault:TestParentheses, :TestWhitespace, :EcjPsiExpressionList, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault()
<<<:EcjPsiMethodCallExpression
children=>>>[:TestWhitespace, TimeZone.getDefault:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:TestParentheses, :TestWhitespace, getDefault:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:TestParentheses, :TestWhitespace, getDefault:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone.getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:TestParentheses, :TestWhitespace, getDefault:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiParenthesizedExpression
NodeImpl=TestParentheses
Source=>>>TimeZone<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=TestParentheses
Source=>>>TimeZone<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[:TestWhitespace, TimeZone:EcjPsiReferenceExpression, :TestWhitespace, 
]<<<

Node=PsiReferenceExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiExpression
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiJavaCodeReferenceElement
NodeImpl=EcjPsiReferenceExpression
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:TestParentheses
children=>>>[:TestWhitespace, TimeZone:EcjPsiIdentifier, :TestWhitespace, 
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>TimeZone<<<
parent=>>>
TimeZone
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getDefault<<<
parent=>>>
TimeZone.getDefault
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
TimeZone.getDefault()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

Node=PsiIdentifier
NodeImpl=EcjPsiIdentifier
Source=>>>getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiJavaToken
NodeImpl=EcjPsiIdentifier
Source=>>>getRawOffset<<<
parent=>>>
TimeZone.getDefault().getRawOffset
<<<:EcjPsiReferenceExpression
children=>>>[
]<<<

Node=PsiExpressionList
NodeImpl=EcjPsiExpressionList
Source=>>><<<
parent=>>>
TimeZone.getDefault().getRawOffset()
<<<:EcjPsiMethodCallExpression
children=>>>[
]<<<

afterCheckFile (Ph.1) -> Source=>>>
package test.pkg;

import java.util.TimeZone;

public class SrpMethodsGreet {

    private String mGreetName;
    private String mGreetMessage;
    private long mGreetTime;
    private int mGreetCount;

    public SrpMethodsGreet(String name) {
        mGreetName = name;
    }

    // 状態変更メソッド （唯一）
    private void createGreetTimeCountMessage() {
        mGreetTime = System.currentTimeMillis();
        long dayOffset = getDayOffset(mGreetTime);
        if (dayOffset >= 0 && dayOffset < (3600000*6)) {
            mGreetMessage = "ZZZ...";
        } else
        if (dayOffset >= (3600000*6) && dayOffset < (3600000*10)) {
            mGreetMessage = "おはようございます。";
        } else
        if (dayOffset >= (3600000*10) && dayOffset < (3600000*18)) {
            mGreetMessage = "こんにちは。";
        } else
        if (dayOffset >= (3600000*18) && dayOffset < (3600000*21)) {
            mGreetMessage = "こんばんは。";
        } else
        if (dayOffset >= (3600000*21) && dayOffset < (3600000*24)) {
            mGreetMessage = "おやすみなさい。";
        }
        mGreetCount = mGreetCount + 1;
    }

    // 関数
    public void greet() {
        createGreetTimeCountMessage();
        System.out.println(mGreetName+"さん、"+mGreetMessage+" ("+mGreetCount+"回目の挨拶)");
    }

    // 関数
    private static long getDayOffset(final long timeInMillis) {
        long fixedTimestamp = timeInMillis + TIMEZONE_OFFSET_MILLISECOND;
        long timestampOf12am = (fixedTimestamp / MILLISECOND_AT_A_DAY) * MILLISECOND_AT_A_DAY;
        return fixedTimestamp - timestampOf12am;
    }
    private static final long MILLISECOND_AT_A_DAY = 24 * 3600 * 1000;
    private static final int TIMEZONE_OFFSET_MILLISECOND = TimeZone.getDefault().getRawOffset();
}

<<<

afterCheckProject (Ph.1)<<<


